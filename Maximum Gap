class Solution {
public:
    int maximumGap(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int maxi=INT_MIN;
        int n=nums.size();
        if(n<2){
            return 0;
        }
        for(int i=0;i<n-1;i++){
           int diff=nums[i+1]-nums[i];
           if(diff> maxi){
             maxi=diff;
           }
        }
        return maxi;
    }
};


class Solution {
public:
    void merge(vector<int>& nums,int s,int e)
    {
        int mid=s+(e-s)/2;

        int len1=mid-s+1,len2=e-mid;
        int arr1[len1],arr2[len2];
        int k=s;
        for(int i=0;i<len1;i++)
        {
           arr1[i]=nums[k++];
        }
        k=mid+1;
        for(int i=0;i<len2;i++)
        {
          arr2[i]=nums[k++];
        }
        k=s;
        int i1=0,i2=0;
        while(i1<len1 && i2<len2)
        {
            if(arr1[i1]<arr2[i2])
            {
                nums[k++]=arr1[i1++];
            }
            else{
                nums[k++]=arr2[l2++];
            }
        }
        while(i1<len1)
        {
            nums[k++]=arr1[i1++];
        }
        while(i2<len2)
        {
            nums[k++]=arr2[i2++];
        }
    }
    void sort(vector<int>& nums,int s,int e)
    {
        if(s>=e)
        {
            return;
        }
        int mid=s+(e-s)/2;
        sort(nums,s,mid);
        sort(nums,mid+1,e);

        merge(nums,s,e);
    }
    int maximumGap(vector<int>& nums) {
        int n=nums.size();
        if(n<2)
        {
            return 0;
        }
        sort(nums,0,n-1);

        int maxi=INT_MIN;
        for(int i=0;i<n-1;i++)
        {
           int diff=nums[i+1]-nums[i];
           if(diff>maxi){
            maxi=diff;
           }
        }
        return maxi;
    }
};
